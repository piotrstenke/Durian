using Xunit;

namespace Durian.Tests.AnalysisCore.AutoGenerated
{
	public sealed class ApplyHeader
	{
		private const string _input = "Test String";

		[Fact]
		public void ExcludesGeneratorNameAndVersion_When_GeneratorNameIsNull()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, null, GetHeader.GeneratorVersion) == Format(GetHeader.NoNameOrVersion));
		}

		[Fact]
		public void ExcludesGeneratorNameAndVersion_When_GeneratorNameIsNull_And_OverloadWithoutVersionWasCalled()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, null) == Format(GetHeader.NoNameOrVersion));
		}

		[Fact]
		public void ExcludesGeneratorNameAndVersion_When_GeneratorNameIsNull_And_VersionIsNull()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, null, null) == Format(GetHeader.NoNameOrVersion));
		}

		[Fact]
		public void ExcludesGeneratorNameAndVersion_When_OverloadWithInputOnlyWasCalled()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input) == Format(GetHeader.NoNameOrVersion));
		}

		[Fact]
		public void ExcludesVersion_When_VersionIsNull()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, GetHeader.GeneratorName, null) == Format(GetHeader.NoVersion));
		}

		[Fact]
		public void ExcludesVersion_When_OverloadWithoutVersionWasCalled()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, GetHeader.GeneratorName) == Format(GetHeader.NoVersion));
		}

		[Fact]
		public void IncludesGeneratorNameAndVersion_When_TheyAreNotNull()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(_input, GetHeader.GeneratorName, GetHeader.GeneratorVersion) == Format(GetHeader.WithNameAndVersion));
		}

		[Fact]
		public void ReturnsRawHeader_When_InputIsNull()
		{
			Assert.True(Durian.AutoGenerated.ApplyHeader(null, GetHeader.GeneratorName, GetHeader.GeneratorVersion) == GetHeader.WithNameAndVersion);
		}

		private static string Format(string header)
		{
			return $"{header}\n{_input}";
		}
	}
}
