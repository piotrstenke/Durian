//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenerateModuleRepository project.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Durian.Info
{
	/// <summary>
	/// Factory class of <see cref="TypeIdentity"/>s for all available Durian <see cref="Type"/>s.
	/// </summary>
	public static class TypeRepository
	{
		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.DisableModuleAttribute"/> type.
		/// </summary>
		public static TypeIdentity DisableModuleAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DisableModuleAttribute", out TypeIdentity type))
				{
					type = new(
						name: "DisableModuleAttribute",
						@namespace: "DisableModuleAttribute",
						modules: new DurianModule[]
						{
							DurianModule.Manager,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Generator.DurianGeneratedAttribute"/> type.
		/// </summary>
		public static TypeIdentity DurianGeneratedAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DurianGeneratedAttribute", out TypeIdentity type))
				{
					type = new(
						name: "DurianGeneratedAttribute",
						@namespace: "DurianGeneratedAttribute",
						modules: new DurianModule[]
						{
							DurianModule.Core,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Generator.EnableModuleAttribute"/> type.
		/// </summary>
		public static TypeIdentity EnableModuleAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("EnableModuleAttribute", out TypeIdentity type))
				{
					type = new(
						name: "EnableModuleAttribute",
						@namespace: "EnableModuleAttribute",
						modules: new DurianModule[]
						{
							DurianModule.Core,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Generator.PackageDefinitionAttribute"/> type.
		/// </summary>
		public static TypeIdentity PackageDefinitionAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("PackageDefinitionAttribute", out TypeIdentity type))
				{
					type = new(
						name: "PackageDefinitionAttribute",
						@namespace: "PackageDefinitionAttribute",
						modules: new DurianModule[]
						{
							DurianModule.Core,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.DefaultParamAttribute"/> type.
		/// </summary>
		public static TypeIdentity DefaultParamAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DefaultParamAttribute", out TypeIdentity type))
				{
					type = new(
						name: "DefaultParamAttribute",
						@namespace: "DefaultParamAttribute",
						modules: new DurianModule[]
						{
							DurianModule.DefaultParam,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.DefaultParamConfigurationAttribute"/> type.
		/// </summary>
		public static TypeIdentity DefaultParamConfigurationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DefaultParamConfigurationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "DefaultParamConfigurationAttribute",
						@namespace: "DefaultParamConfigurationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.DefaultParam,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.DefaultParamScopedConfigurationAttribute"/> type.
		/// </summary>
		public static TypeIdentity DefaultParamScopedConfigurationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DefaultParamScopedConfigurationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "DefaultParamScopedConfigurationAttribute",
						@namespace: "DefaultParamScopedConfigurationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.DefaultParam,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.DPMethodConvention"/> type.
		/// </summary>
		public static TypeIdentity DPMethodConvention
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DPMethodConvention", out TypeIdentity type))
				{
					type = new(
						name: "DPMethodConvention",
						@namespace: "DPMethodConvention",
						modules: new DurianModule[]
						{
							DurianModule.DefaultParam,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.DPTypeConvention"/> type.
		/// </summary>
		public static TypeIdentity DPTypeConvention
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("DPTypeConvention", out TypeIdentity type))
				{
					type = new(
						name: "DPTypeConvention",
						@namespace: "DPTypeConvention",
						modules: new DurianModule[]
						{
							DurianModule.DefaultParam,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.FriendClassAttribute"/> type.
		/// </summary>
		public static TypeIdentity FriendClassAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("FriendClassAttribute", out TypeIdentity type))
				{
					type = new(
						name: "FriendClassAttribute",
						@namespace: "FriendClassAttribute",
						modules: new DurianModule[]
						{
							DurianModule.FriendClass,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.FriendClassConfigurationAttribute"/> type.
		/// </summary>
		public static TypeIdentity FriendClassConfigurationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("FriendClassConfigurationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "FriendClassConfigurationAttribute",
						@namespace: "FriendClassConfigurationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.FriendClass,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.AllowSpecializationAttribute"/> type.
		/// </summary>
		public static TypeIdentity AllowSpecializationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("AllowSpecializationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "AllowSpecializationAttribute",
						@namespace: "AllowSpecializationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.GenericSpecialization,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.GenericSpecializationAttribute"/> type.
		/// </summary>
		public static TypeIdentity GenericSpecializationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("GenericSpecializationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "GenericSpecializationAttribute",
						@namespace: "GenericSpecializationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.GenericSpecialization,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.GenericSpecializationConfigurationAttribute"/> type.
		/// </summary>
		public static TypeIdentity GenericSpecializationConfigurationAttribute
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("GenericSpecializationConfigurationAttribute", out TypeIdentity type))
				{
					type = new(
						name: "GenericSpecializationConfigurationAttribute",
						@namespace: "GenericSpecializationConfigurationAttribute",
						modules: new DurianModule[]
						{
							DurianModule.GenericSpecialization,
						}
					);
				}

				return type;
			}
		}

		/// <summary>
		/// Returns a <see cref="TypeIdentity"/> for the <see cref="Durian.Configuration.GenSpecImportOptions"/> type.
		/// </summary>
		public static TypeIdentity GenSpecImportOptions
		{
			get
			{
				if(!IdentityPool.Types.TryGetValue("GenSpecImportOptions", out TypeIdentity type))
				{
					type = new(
						name: "GenSpecImportOptions",
						@namespace: "GenSpecImportOptions",
						modules: new DurianModule[]
						{
							DurianModule.GenericSpecialization,
						}
					);
				}

				return type;
			}
		}
	}
}