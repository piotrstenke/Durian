//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenerateModuleRepository project.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Durian.Info
{
	/// <summary>
	/// Factory class of <see cref="ModuleIdentity"/> for all available Durian modules.
	/// </summary>
	public static class ModuleRepository
	{
		/// <summary>
		/// Returns a <see cref="ModuleIdentity"/> for the <c>Durian.AnalysisServices</c> module.
		/// </summary>
		public static ModuleIdentity AnalysisServices => new(
			name: "Durian.AnalysisServices",
			version: "1.0.0",
			module: DurianModule.AnalysisServices,
			type: ModuleType.Library,
			id: default,
			docPath: @"docs\AnalysisServices",
			diagnostics: new DiagnosticData[]
			{
				new DiagnosticData("Projects with any Durian analyzer must reference the Durian.Core package", 01, "DUR0001.md", true, true),
				new DiagnosticData("Type cannot be accessed, because its module is not imported", 02, "DUR0002.md", false, true),
			}
		);

		/// <summary>
		/// Returns a <see cref="ModuleIdentity"/> for the <c>Durian.Core</c> module.
		/// </summary>
		public static ModuleIdentity Core => new(
			name: "Durian.Core",
			version: "1.0.0",
			module: DurianModule.Core,
			type: ModuleType.Library,
			id: default
		);

		/// <summary>
		/// Returns a <see cref="ModuleIdentity"/> for the <c>Durian.CoreAnalyzer</c> module.
		/// </summary>
		public static ModuleIdentity CoreAnalyzer => new(
			name: "Durian.CoreAnalyzer",
			version: "1.0.0",
			module: DurianModule.CoreAnalyzer,
			type: ModuleType.Analyzer,
			id: default,
			docPath: @"docs\CoreAnalyzer",
			diagnostics: new DiagnosticData[]
			{

				// External diagnostics

				new DiagnosticData("Projects with any Durian analyzer must reference the Durian.Core package", 01, "DUR0001.md", true, true, AnalysisServices),
				new DiagnosticData("Type cannot be accessed, because its module is not imported", 02, "DUR0002.md", false, true, AnalysisServices),
			}
		);

		/// <summary>
		/// Returns a <see cref="ModuleIdentity"/> for the <c>Durian.DefaultParam</c> module.
		/// </summary>
		public static ModuleIdentity DefaultParam => new(
			name: "Durian.DefaultParam",
			version: "1.0.0",
			module: DurianModule.DefaultParam,
			type: ModuleType.SyntaxBasedGenerator | ModuleType.Analyzer,
			id: 01,
			docPath: @"docs\DefaultParam",
			diagnostics: new DiagnosticData[]
			{
				new DiagnosticData("Containing type of a member with the DefaultParam attribute must be partial", 01, "DUR0101.md", true, true),
				new DiagnosticData("Method with the DefaultParam attribute cannot be partial or extern", 02, "DUR0102.md", true, true),
				new DiagnosticData("DefaultParamAttribute is not valid on local functions or lambdas", 03, "DUR0103.md", true, true),
				new DiagnosticData("DefaultParamAttribute cannot be applied to members with the GeneratedCodeAttribute or DurianGeneratedAttribute", 04, "DUR0104.md", true, true),
				new DiagnosticData("DefaultParamAttribute must be placed on the right-most type parameter", 05, "DUR0105.md", true, true),
				new DiagnosticData("Value of DefaultParamAttribute does not satisfy the type constraint", 06, "DUR0106.md", true, true),
				new DiagnosticData("Do not override methods generated using DefaultParamAttribute", 07, "DUR0107.md", true, true),
				new DiagnosticData("Value of DefaultParamAttribute of overriding method must match the base method", 08, "DUR0108.md", true, true),
				new DiagnosticData("Do not add the DefaultParamAttribute on overridden type parameters", 09, "DUR0109.md", true, true),
				new DiagnosticData("DefaultParamAttribute of overridden type parameter should be added for clarity", 10, "DUR0110.md", false, true),
				new DiagnosticData("DefaultParamConfigurationAttribute is not valid on members without the DefaultParamAttribute", 11, "DUR0111.md", true, true),
				new DiagnosticData("TypeConvention property should not be used on members other than types", 12, "DUR0112.md", false, true),
				new DiagnosticData("MethodConvention property should not be used on members other than methods", 13, "DUR0113.md", false, true),
				new DiagnosticData("Method with generated signature already exist", 14, "DUR0114.md", true, true),
				new DiagnosticData("DefaultParamConfigurationAttribute is not valid on this type of method", 15, "DUR0115.md", true, true),
				new DiagnosticData("Do not change value of the DefaultParamAttribute when implementing an interface method", 16, "DUR0116.md", true, true),
				new DiagnosticData("Do not implement interface methods generated using the DefaultParamAttribute", 17, "DUR0117.md", true, true),
				new DiagnosticData("Value of DefaultParam attribute is different than that of implicitly implemented method", 18, "DUR0118.md", true, true),
				new DiagnosticData("Value of DefaultParam attribute is different for inherited method and implicitly implemented interface method", 19, "DUR0119.md", true, true),

				// External diagnostics

				new DiagnosticData("Projects with any Durian analyzer must reference the Durian.Core package", 01, "DUR0001.md", true, true, AnalysisServices),
			},
			types: new TypeIdentity[]
			{
				new TypeIdentity("DefaultParamAttribute", "Durian"),
				new TypeIdentity("DefaultParamConfigurationAttribute", "Durian.Configuration"),
				new TypeIdentity("DPMethodConvention", "Durian.Configuration"),
				new TypeIdentity("DPTypeConvention", "Durian.Configuration"),
			}
		);

		/// <summary>
		/// Returns a <see cref="ModuleIdentity"/> for the <c>Durian.TestServices</c> module.
		/// </summary>
		public static ModuleIdentity TestServices => new(
			name: "Durian.TestServices",
			version: "1.0.0",
			module: DurianModule.TestServices,
			type: ModuleType.Library,
			id: default
		);
	}
}
