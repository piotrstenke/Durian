using System;
using System.Collections.Immutable;

namespace Durian.Generator
{
	/// <summary>
	/// Contains basic information about a tree generated by a Durian source generator.
	/// </summary>
	public sealed record StaticTreeIdentity : IEquatable<StaticTreeIdentity>
	{
		private ModuleIdentity? _module;

		/// <summary>
		/// Name of the generated type -or- empty <see cref="string"/> if <see cref="Type"/> is equal to <see cref="StaticTreeType.Configuration"/> or <see cref="StaticTreeType.Other"/>.
		/// </summary>
		public string Name { get; }

		/// <summary>
		/// Fully qualified name of the generated type -or- empty <see cref="string"/> if <see cref="Type"/> is equal to <see cref="StaticTreeType.Configuration"/> or <see cref="StaticTreeType.Other"/>.
		/// </summary>
		public string FullyQualifiedName => $"{Namespace}.{Name}";

		/// <summary>
		/// Namespace where the generated type is to be found -or- empty <see cref="string"/> if <see cref="Type"/> is equal to <see cref="StaticTreeType.Configuration"/> or <see cref="StaticTreeType.Other"/> or the type is placed in the <see langword="global"/> namespace.
		/// </summary>
		public string Namespace { get; }

		/// <summary>
		/// Type of this syntax tree.
		/// </summary>
		public StaticTreeType Type { get; }

		/// <summary>
		/// Module this <see cref="StaticTreeIdentity"/> is part of.
		/// </summary>
		public ModuleIdentity Module => _module!;

		/// <summary>
		/// Sub-trees of this <see cref="StaticTreeIdentity"/>.
		/// </summary>
		public ImmutableArray<StaticTreeIdentity> SubTrees { get; }

		internal StaticTreeIdentity(string name, string @namespace, StaticTreeType type, StaticTreeIdentity[]? subTrees = null)
		{
			Name = name;
			Namespace = @namespace;
			Type = type;
			SubTrees = ImmutableArray.Create(subTrees);
		}

		/// <inheritdoc/>
		public override string ToString()
		{
			return FullyQualifiedName;
		}

		/// <inheritdoc/>
		public override int GetHashCode()
		{
			int hashCode = -1246297765;
			hashCode = (hashCode * -1521134295) + _module!.GetHashCode();
			hashCode = (hashCode * -1521134295) + Name.GetHashCode();
			hashCode = (hashCode * -1521134295) + Namespace.GetHashCode();
			hashCode = (hashCode * -1521134295) + Type.GetHashCode();
			hashCode = (hashCode * -1521134295) + SubTrees.GetHashCode();
			return hashCode;
		}

		internal void SetModule(ModuleIdentity module)
		{
			_module = module;
		}
	}
}
