namespace Durian
{
	/// <summary>
	/// Contains various utility methods that generate text of the &lt;auto-generated&gt; header or the <see cref="System.CodeDom.Compiler.GeneratedCodeAttribute"/>.
	/// </summary>
	public static class AutoGenerated
	{
		/// <inheritdoc cref="GetHeader(string, string)"/>
		public static string GetHeader()
		{
			return GetHeader(null, null);
		}

		/// <inheritdoc cref="GetHeader(string, string)"/>
		public static string GetHeader(string? generatorName)
		{
			return GetHeader(generatorName, null);
		}

		/// <summary>
		/// Returns a <see cref="string"/> that is written at the beginning of every auto-generated C# file.
		/// </summary>
		/// <param name="generatorName">Name of generator that created the following code.</param>
		/// <param name="version">Version of the generator that created the following code.</param>
		public static string GetHeader(string? generatorName, string? version)
		{
			string name;

			if (string.IsNullOrWhiteSpace(generatorName))
			{
				name = "a source generator";
			}
			else if (string.IsNullOrWhiteSpace(version))
			{
				name = $"the {generatorName} class";
			}
			else
			{
				name = $"the {generatorName} class (version {version})";
			}

			return
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by {name}.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";
		}

		/// <summary>
		/// Returns a <see cref="string"/> that combines the <paramref name="input"/> and the header returned by the <see cref="GetHeader()"/> method.
		/// </summary>
		/// <param name="input"><see cref="string"/> to apply the header to.</param>
		public static string ApplyHeader(string? input)
		{
			return ApplyHeader(input, null, null);
		}

		/// <summary>
		/// Returns a <see cref="string"/> that combines the <paramref name="input"/> and the header returned by the <see cref="GetHeader(string?)"/> method.
		/// </summary>
		/// <param name="input"><see cref="string"/> to apply the header to.</param>
		/// <param name="generatorName">Name of generator that created the following code.</param>
		public static string ApplyHeader(string? input, string? generatorName)
		{
			return ApplyHeader(input, generatorName, null);
		}

		/// <summary>
		/// Returns a <see cref="string"/> that combines the <paramref name="input"/> and the header returned by the <see cref="GetHeader(string?, string?)"/> method.
		/// </summary>
		/// <param name="input"><see cref="string"/> to apply the header to.</param>
		/// <param name="generatorName">Name of generator that created the following code.</param>
		/// <param name="version">Version of the generator that created the following code.</param>
		public static string ApplyHeader(string? input, string? generatorName, string? version)
		{
			return $"{GetHeader(generatorName, version)}{(string.IsNullOrEmpty(input) ? string.Empty : $"\n{input}")}";
		}

		/// <summary>
		/// Returns a <see cref="string"/> that represents the <see cref="System.CodeDom.Compiler.GeneratedCodeAttribute"/> with empty strings as its arguments.
		/// </summary>
		public static string GetAttribute()
		{
			return GetAttribute(null, null, false);
		}

		/// <summary>
		/// Returns a <see cref="string"/> that represents the <see cref="System.CodeDom.Compiler.GeneratedCodeAttribute"/> with the specified <paramref name="generatorName"/> as its argument.
		/// </summary>
		/// <param name="generatorName">Name of generator that created the following code.</param>
		public static string GetAttribute(string? generatorName)
		{
			return GetAttribute(generatorName, null, false);
		}

		/// <inheritdoc cref="GetAttribute(string?, string?, bool)"/>
		public static string GetAttribute(string? generatorName, string? version)
		{
			return GetAttribute(generatorName, version, false);
		}

		/// <summary>
		/// Returns a <see cref="string"/> that represents the <see cref="System.CodeDom.Compiler.GeneratedCodeAttribute"/> with the specified <paramref name="generatorName"/> and <paramref name="version"/> as its arguments.
		/// </summary>
		/// <param name="generatorName">Name of generator that created the following code.</param>
		/// <param name="version">Version of the generator that created the following code.</param>
		/// <param name="includeFullyQualifiedName">Determines whether to write the name of the attribute using the fully qualified name or the sole attribute name.</param>
		public static string GetAttribute(string? generatorName, string? version, bool includeFullyQualifiedName)
		{
			return $"[{(includeFullyQualifiedName ? "System.CodeDom.Compiler." : "")}GeneratedCode(\"{generatorName ?? string.Empty}\", \"{version ?? string.Empty}\")]";
		}

		/// <inheritdoc cref="GetInheritdoc(string?)"/>
		public static string GetInheritdoc()
		{
			return "/// <inheritdoc/>";
		}

		/// <summary>
		/// Returns a <see cref="string"/> that contains the inheritdoc tag.
		/// </summary>
		/// <param name="source">Source to put in the '<c>cref</c>' attribute.</param>
		public static string GetInheritdoc(string? source)
		{
			if (source is null)
			{
				return GetInheritdoc();
			}

			return $"/// <inheritdoc cref=\"{source}\"/>";
		}
	}
}
