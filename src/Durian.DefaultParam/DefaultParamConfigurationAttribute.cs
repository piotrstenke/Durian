using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Durian.DefaultParam
{
	/// <summary>
	/// Static class that contains all the metadata of the actual <c>DefaultParamConfigurationAttribute</c>.
	/// </summary>
	public static class DefaultParamConfigurationAttribute
	{
		/// <summary>
		/// Name of the <c>DefaultParamConfigurationAttribute</c> without the 'Attribute' suffix, i.e. 'DefaultParamConfiguration'.
		/// </summary>
		public static string AttributeName => "DefaultParamConfiguration";

		/// <summary>
		/// Full name of the <c>DefaultParamConfigurationAttribute</c>, i.e. 'DefaultParamConfigurationAttribute'.
		/// </summary>
		public static string FullTypeName => DurianStrings.GetFullAttributeType(AttributeName);

		/// <summary>
		/// Fully qualified name of the <c>DefaultParamConfigurationAttribute</c>, i.e. 'Durian.Configuration.DefaultParamConfigurationAttribute'.
		/// </summary>
		public static string FullyQualifiedName => DurianStrings.GetFullyQualifiedConfigurationAttribute(AttributeName);

		/// <summary>
		/// Name of the <c>TypeConvetion</c> property.
		/// </summary>
		public static string TypeConventionProperty => "TypeConvention";

		/// <summary>
		/// Name of the <c>MethodConvention</c> property.
		/// </summary>
		public static string MethodConvetionProperty => "MethodConvention";

		/// <summary>
		/// Name of the <c>ApplyNewModifierWhenPossible</c> property.
		/// </summary>
		public static string ApplyNewModifierWhenPossibleProperty => "ApplyNewModifierWhenPossible";

		/// <summary>
		/// Returns full source code of the <c>DefaultParamConfigurationAttribute</c>.
		/// </summary>
		public static string GetText()
		{
			return
$@"{AutoGenerated.GetHeader(DefaultParamGenerator.GeneratorName, DefaultParamGenerator.Version)}
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using {DurianStrings.GeneratorNamespace};

namespace {DurianStrings.ConfigurationNamespace}
{{
	/// <summary>
	/// Configures how the <see cref=""{DefaultParamAttribute.FullTypeName}""/> behaves in the current assembly.
	/// </summary>
	[AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface | AttributeTargets.Method, AllowMultiple = false, Inherited = false)]
	[Conditional(""DEBUG"")]
	[GeneratedCode(""{DefaultParamGenerator.GeneratorName}"", ""{DefaultParamGenerator.Version}"")]
	[DurianGenerated]
	public sealed class {FullTypeName} : Attribute
	{{
		/// <inheritdoc cref=""{DPTypeGenConvention.Name}"" />
		public {DPTypeGenConvention.Name} {TypeConventionProperty} {{ get; set; }}

		/// <inheritdoc cref=""{DPMethodGenConvention.Name}"" />
		public {DPMethodGenConvention.Name} {MethodConvetionProperty} {{ get; set; }}

		/// <summary>
		/// Determines whether to apply the <see langword=""new""/> modifier to the generated member when possible instead of reporting an error. Defaults to <see langword=""false""/>.
		/// </summary>
		public bool {ApplyNewModifierWhenPossibleProperty} {{ get; set; }}

		/// <summary>
		/// Initializes a new instance of the <see cref=""{FullTypeName}""/> class.
		/// </summary>
		public {FullTypeName}()
		{{
		}}
	}}
}}
";
		}

		/// <summary>
		/// Returns full source code of the <c>DefaultParamConfigurationAttribute</c> as an instance of <see cref="SourceText"/> with the <see cref="Encoding.UTF8"/> applied.
		/// </summary>
		public static SourceText CreateSourceText()
		{
			return SourceText.From(GetText(), Encoding.UTF8);
		}

		/// <summary>
		/// Returns full <see cref="CSharpSyntaxTree"/> of the <c>DefaultParamConfigurationAttribute</c>.
		/// </summary>
		/// <param name="parseOptions"><see cref="CSharpParseOptions"/> that should be used when parsing the source code returned by the <see cref="GetText"/> method.</param>
		/// <param name="cancellationToken"><see cref="CancellationToken"/> that specifies if the operation should be canceled.</param>
		public static CSharpSyntaxTree CreateSyntaxTree(CSharpParseOptions? parseOptions = null, CancellationToken cancellationToken = default)
		{
			return (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(GetText(), encoding: Encoding.UTF8, options: parseOptions, cancellationToken: cancellationToken);
		}
	}
}
