using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Durian.DefaultParam
{
	/// <summary>
	/// Represents the generated <c>DPTypeGenConvention</c> <see langword="enum"/>.
	/// </summary>
	public static class DPTypeGenConvention
	{
		/// <summary>
		/// Uses default convention, which is <see cref="Copy"/>.
		/// </summary>
		public const int Default = 0;

		/// <summary>
		/// Copies whole type declaration.
		/// </summary>
		public const int Copy = 1;

		/// <summary>
		/// Directly inherits the type.
		/// </summary>
		public const int Inherit = 2;

		/// <summary>
		/// Returns the name of the <see langword="enum"/> this class represents.
		/// </summary>
		public static string Name => nameof(DPTypeGenConvention);

		/// <summary>
		/// Returns the fully qualified name of the <see langword="enum"/> this class represents.
		/// </summary>
		public static string FullName => $"{DurianStrings.ConfigurationNamespace}.{Name}";

		/// <summary>
		/// Determines, whether the <see cref="DefaultParamGenerator"/> should generate a call to the target method instead of copying its content.
		/// </summary>
		/// <param name="value">Value representing the <see cref="DPTypeGenConvention"/> enum passed to the <see cref="DefaultParamConfigurationAttribute"/>.</param>
		public static bool InheritInsteadOfCopying(int value)
		{
			return value == Inherit;
		}

		/// <summary>
		/// Returns full source code of the <c>DPTypeGenConvention</c> as an instance of <see cref="SourceText"/> with the <see cref="Encoding.UTF8"/> applied.
		/// </summary>
		public static string GetText()
		{
			return
$@"{AutoGenerated.GetHeader(DefaultParamGenerator.GeneratorName, DefaultParamGenerator.Version)}
using System.CodeDom.Compiler;
using {DurianStrings.GeneratorNamespace};

namespace {DurianStrings.ConfigurationNamespace}
{{
	/// <summary>
	/// Determines how the <c>DefaultParam</c> generator generates a type.
	/// </summary>
	[GeneratedCode(""{DefaultParamGenerator.GeneratorName}"", ""{DefaultParamGenerator.Version}"")]
	[DurianGenerated]
	public enum {Name}
	{{
		/// <summary>
		/// Uses default convention, which is <see cref=""{nameof(Copy)}""/>.
		/// </summary>
		{nameof(Default)} = {Default},

		/// <summary>
		/// Copies whole type declaration.
		/// </summary>
		{nameof(Copy)} = {Copy},

		/// <summary>
		/// Directly inherits the type. Works only for interfaces and classes. 
		/// </summary>
		{nameof(Inherit)} = {Inherit}
	}}
}}
";
		}

		/// <summary>
		/// Returns full source code of the <c>DPTypeGenConvention</c> as an instance of <see cref="SourceText"/> with the <see cref="Encoding.UTF8"/> applied.
		/// </summary>
		public static SourceText CreateSourceText()
		{
			return SourceText.From(GetText(), Encoding.UTF8);
		}

		/// <summary>
		/// Returns full <see cref="CSharpSyntaxTree"/> of the <c>DPTypeGenConvention</c>.
		/// </summary>
		/// <param name="parseOptions"><see cref="CSharpParseOptions"/> that should be used when parsing the source code returned by the <see cref="GetText"/> method.</param>
		/// <param name="cancellationToken"><see cref="CancellationToken"/> that specifies if the operation should be canceled.</param>
		public static CSharpSyntaxTree CreateSyntaxTree(CSharpParseOptions? parseOptions = null, CancellationToken cancellationToken = default)
		{
			return (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(GetText(), encoding: Encoding.UTF8, options: parseOptions, cancellationToken: cancellationToken);
		}
	}
}
