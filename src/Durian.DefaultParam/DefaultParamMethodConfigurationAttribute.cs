using System.Text;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Durian.DefaultParam
{
	public static class DefaultParamMethodConfigurationAttribute
	{
		public static string AttributeName => "DefaultParamMethodConfiguration";
		public static string FullTypeName => DurianStrings.GetFullAttributeType(AttributeName);
		public static string FullyQualifiedName => DurianStrings.GetFullyQualifiedConfigurationAttribute(AttributeName);
		public static string CallInsteadOfCopyingProperty => "CallInsteadOfCopying";

		public static string GetText()
		{
			return
$@"{AutoGenerated.GetHeader(DefaultParamGenerator.GeneratorName, DefaultParamGenerator.Version)}
using System;
using System.CodeDom.Compiler;
using {DurianStrings.GeneratorAttributesNamespace};

namespace {DurianStrings.ConfigurationNamespace}
{{
	/// <summary>
	/// Configures how the <see cref=""{DefaultParamAttribute.FullTypeName}""/> behaves when applied to this method.
	/// </summary>
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
	[GeneratedCode(""{DefaultParamGenerator.GeneratorName}"", ""{DefaultParamGenerator.Version}"")]
	[DurianGenerated]
	public sealed class {FullTypeName} : Attribute
	{{
		/// <summary>
		/// Determines whether the generated method should call this method instead of copying its contents.
		/// </summary>
		public bool {CallInsteadOfCopyingProperty} {{ get; set; }}

		/// <summary>
		/// Initializes a new instance of the <see cref=""{FullTypeName}""/> class.
		/// </summary>
		public {FullTypeName}()
		{{
		}}
	}}
}}
";
		}

		public static SourceText CreateSourceText()
		{
			return SourceText.From(GetText(), Encoding.UTF8);
		}

		public static CSharpSyntaxTree CreateSyntaxTree()
		{
			return (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(GetText(), encoding: Encoding.UTF8);
		}
	}
}
