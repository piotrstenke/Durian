// Copyright (c) Piotr Stenke. All rights reserved.
// Licensed under the MIT license.

using Durian.Analysis;
using Durian.Analysis.Logging;
using System.Runtime.CompilerServices;

namespace Durian.TestServices
{
    /// <summary>
    /// An abstract class that provides methods to test <see cref="IDurianGenerator"/>s and log information about the generator test.
    /// </summary>
    /// <typeparam name="T">Type of target <see cref="ILoggableGenerator"/>.</typeparam>
    public abstract class DurianGeneratorTest<T> : LoggableGeneratorTest<ITestableGenerator> where T : IDurianGenerator, ILoggableGenerator
    {
        /// <summary>
        /// Underlaying source generator to test.
        /// </summary>
        public T Generator { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DurianGeneratorTest{T}"/> class.
        /// </summary>
        protected DurianGeneratorTest() : this(true)
        {
            Generator = CreateUnderlayingGenerator(_configuration);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DurianGeneratorTest{T}"/> class.
        /// </summary>
        /// <param name="enableDiagnostics">Determines whether to enable diagnostics for the created <see cref="ILoggableGenerator"/> if it supports any.</param>
        protected DurianGeneratorTest(bool enableDiagnostics) : base(enableDiagnostics, typeof(T))
        {
            Generator = CreateUnderlayingGenerator(_configuration);
        }

        /// <summary>
        /// Provides text of the <see cref="Generator.DurianGeneratedAttribute"/> and <see cref="System.CodeDom.Compiler.GeneratedCodeAttribute"/>,
        /// </summary>
        /// <param name="source">Parameter to pass to the attributes' constructor.</param>
        /// <param name="indent">Indent level to apply.</param>
        public string GetCodeGenerationAttributes(string? source, int indent = 1)
        {
            return AutoGenerated.GetCodeGenerationAttributes(Generator.GeneratorName, Generator.GeneratorVersion, source, indent);
        }

        /// <inheritdoc/>
        public override sealed SingletonGeneratorTestResult RunGenerator(string? input, int index, [CallerMemberName] string testName = "")
        {
            return base.RunGenerator(input, Generator.NumStaticTrees + index, testName);
        }

        /// <inheritdoc/>
        public override sealed SingletonGeneratorTestResult RunGenerator(string? input, [CallerMemberName] string testName = "")
        {
            return base.RunGenerator(input, Generator.NumStaticTrees, testName);
        }

        /// <inheritdoc/>
        public override sealed SingletonGeneratorTestResult RunGeneratorWithDependency(string? input, string external, int index, [CallerMemberName] string testName = "")
        {
            return base.RunGeneratorWithDependency(input, external, Generator.NumStaticTrees + index, testName);
        }

        /// <inheritdoc/>
        public override sealed SingletonGeneratorTestResult RunGeneratorWithDependency(string? input, string external, [CallerMemberName] string testName = "")
        {
            return base.RunGeneratorWithDependency(input, external, Generator.NumStaticTrees, testName);
        }

        /// <inheritdoc/>
        protected override sealed ITestableGenerator CreateGenerator(LoggingConfiguration configuration, string testName)
        {
            return CreateTestableGenerator(testName);
        }

        /// <summary>
        /// Creates an <see cref="ITestableGenerator"/> for the current test.
        /// </summary>
        /// <param name="testName">Name of the current test.</param>
        protected abstract ITestableGenerator CreateTestableGenerator(string testName);

        /// <summary>
        /// Creates the underlaying <typeparamref name="T"/> generator.
        /// </summary>
        /// <param name="configuration">Configuration for the <see cref="IDurianGenerator"/>.</param>
        protected abstract T CreateUnderlayingGenerator(LoggingConfiguration configuration);
    }
}